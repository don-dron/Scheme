
#|(define (save-data k f)
  (let ((p (open-output-file k)))
    (begin
    (write f p)
    (close-output-port p)
    )))

(save-data "myfile.ss" '(1 2))|#
(define point #f)
(define (use-assertions)
  (call-with-current-continuation (lambda (x) (set! point x ))))
(use-assertions)
(define-syntax assert
  (syntax-rules ()
    ((_ ps) (let ((p? ps))
              (if (not p?)
                  (begin
                    (display "FAILED: ")
                    (display 'ps)
                    (newline)
                    (point))
                  p?)))))
(define (1/x x)
  (assert (not (zero? x))) 
  (/ 1 x))
(define (load-data k)
  (let ((p (open-input-file k)))
    (let f ((x (read p)))
      (if (eof-object? x)
          (begin
            (close-input-port p)
            '())
          (cons x (f (read p)))))))
(apply + (car (load-data "myfile.ss")))

(define (load-str k)
  (let ((p (open-input-file k)))
    (let f ((x (read-char p)))
      (if (eof-object? x)
          (begin
            (close-input-port p)
            '())
          (cons x (f (read-char p)))))))
(define (cheat lst) (str 0 (load-str lst) #f))

(define (str n xs after-not-newline)
  (if (null? xs)
      n
      (if (and (null? (cdr xs))
               (not (or (equal? (car xs) #\return)
                        (equal? (car xs) #\newline)))) 
          (+ 1 n)
          (if (or (equal? (car xs) #\return) (equal? (car xs) #\newline))
              (if after-not-newline
                  (str (+ 1 n) (cdr xs) #f)
                  (str n (cdr xs) #f)
                  )
              (str n (cdr xs) #t)))))
(cheat "laba3.scm")
(define-syntax my-if
  (syntax-rules()
    ((_ pred? true false)
     (force (or (and pred? (delay true)) (delay false))))))
(define-syntax lazy-cons
  (syntax-rules ()   
    ((lazy-cons a b) (cons a (delay b)))))

(define lazy-car car)

(define (lazy-cdr ls)
  (force (cdr ls)))
(define (lazy-ref lst n)
  (if (zero? n)
      (lazy-car lst)
      (lazy-ref (lazy-cdr lst) (- n 1))))
(define (trib-gen a b c)
  (lazy-cons a (trib-gen b c (+ a b c))))
(define (lazy-trib n) (lazy-ref (trib-gen 0 0 1) n))
(define (fib n)
  (cond  ((<= n 1) 0) ((= n 2) 1) 
         (else (+ (fib (- n 1)) (fib (- n 2)) (fib (- n 3))))))

;;;
;;;s
